Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
/home/sega/progs/AI_Tasks/AIenv/lib/python3.10/site-packages/torchinfo/torchinfo.py:477: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  action_fn=lambda data: sys.getsizeof(data.storage()),
/home/sega/progs/AI_Tasks/AIenv/lib/python3.10/site-packages/torch/storage.py:665: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  return super().__sizeof__() + self.nbytes()
=================================================================================================================================================================================================================================
Layer (type (var_name))                            Input Shape               Output Shape              Param #                   Param %                   Kernel Shape              Mult-Adds                 Trainable
=================================================================================================================================================================================================================================
MyUnet (MyUnet)                                    [20, 3, 256, 256]         [20, 2, 256, 256]         --                             --                   --                        --                        True
├─MyEncoder (encoder)                              [20, 3, 256, 256]         [20, 3, 256, 256]         --                             --                   --                        --                        True
│    └─ConvBlock (conv_1)                          [20, 3, 256, 256]         [20, 64, 64, 64]          --                             --                   [3, 3]                    --                        True
│    │    └─Conv2d (conv)                          [20, 3, 256, 256]         [20, 64, 64, 64]          1,792                       0.01%                   [3, 3]                    146,800,640               True
│    │    └─BatchNorm2d (bn)                       [20, 64, 64, 64]          [20, 64, 64, 64]          128                         0.00%                   --                        2,560                     True
│    │    └─ReLU (activation)                      [20, 64, 64, 64]          [20, 64, 64, 64]          --                             --                   --                        --                        --
│    └─ResidualStepBlock (conv_2_residual)         [20, 64, 64, 64]          [20, 96, 32, 32]          --                             --                   --                        --                        True
│    │    └─Sequential (innerConvs)                [20, 64, 64, 64]          [20, 96, 64, 64]          69,936                      0.38%                   --                        5,553,563,520             True
│    │    └─ConvBlock (spatialConv)                [20, 96, 64, 64]          [20, 96, 32, 32]          83,232                      0.45%                   [3, 3]                    1,700,663,040             True
│    └─ResidualStepBlock (conv_3_residual)         [20, 96, 32, 32]          [20, 128, 16, 16]         --                             --                   --                        --                        True
│    │    └─Sequential (innerConvs)                [20, 96, 32, 32]          [20, 128, 32, 32]         249,200                     1.36%                   --                        4,994,277,760             True
│    │    └─ConvBlock (spatialConv)                [20, 128, 32, 32]         [20, 128, 16, 16]         147,840                     0.81%                   [3, 3]                    755,635,200               True
│    └─ResidualStepBlock (conv_4_residual)         [20, 128, 16, 16]         [20, 256, 8, 8]           --                             --                   --                        --                        True
│    │    └─Sequential (innerConvs)                [20, 128, 16, 16]         [20, 256, 16, 16]         654,528                     3.56%                   --                        3,307,445,760             True
│    │    └─ConvBlock (spatialConv)                [20, 256, 16, 16]         [20, 256, 8, 8]           590,592                     3.22%                   [3, 3]                    755,312,640               True
│    └─ResidualStepBlock (conv_5_residual)         [20, 256, 8, 8]           [20, 512, 4, 4]           --                             --                   --                        --                        True
│    │    └─Sequential (innerConvs)                [20, 256, 8, 8]           [20, 512, 8, 8]           5,062,528                  27.57%                   --                        6,439,070,720             True
│    │    └─ConvBlock (spatialConv)                [20, 512, 8, 8]           [20, 512, 4, 4]           2,360,832                  12.86%                   [3, 3]                    755,159,040               True
├─MyDecoder (decoder)                              [20, 3, 256, 256]         [20, 3, 256, 256]         --                             --                   --                        --                        True
│    └─ResidualStepBlock (deconv_1_residual)       [20, 512, 4, 4]           [20, 256, 8, 8]           --                             --                   --                        --                        True
│    │    └─Sequential (innerConvs)                [20, 512, 4, 4]           [20, 256, 4, 4]           6,257,536                  34.08%                   --                        1,991,429,120             True
│    │    └─DeConvBlock (spatialConv)              [20, 256, 4, 4]           [20, 256, 8, 8]           1,049,344                   5.72%                   [4, 4]                    1,342,515,200             True
│    └─ResidualStepBlock (deconv_2_residual)       [20, 256, 8, 8]           [20, 128, 16, 16]         --                             --                   --                        --                        True
│    │    └─Sequential (innerConvs)                [20, 256, 8, 8]           [20, 128, 8, 8]           957,120                     5.21%                   --                        1,211,727,360             True
│    │    └─DeConvBlock (spatialConv)              [20, 128, 8, 8]           [20, 128, 16, 16]         262,528                     1.43%                   [4, 4]                    1,342,837,760             True
│    └─ResidualStepBlock (deconv_3_residual)       [20, 128, 16, 16]         [20, 96, 32, 32]          --                             --                   --                        --                        True
│    │    └─Sequential (innerConvs)                [20, 128, 16, 16]         [20, 96, 16, 16]          294,128                     1.60%                   --                        1,476,069,760             True
│    │    └─DeConvBlock (spatialConv)              [20, 96, 16, 16]          [20, 96, 32, 32]          147,744                     0.80%                   [4, 4]                    3,021,868,800             True
│    └─ResidualStepBlock (deconv_4_residual)       [20, 96, 32, 32]          [20, 64, 64, 64]          --                             --                   --                        --                        True
│    │    └─Sequential (innerConvs)                [20, 96, 32, 32]          [20, 64, 32, 32]          102,576                     0.56%                   --                        2,046,414,720             True
│    │    └─DeConvBlock (spatialConv)              [20, 64, 32, 32]          [20, 64, 64, 64]          65,728                      0.36%                   [4, 4]                    5,373,954,560             True
│    └─DeConvBlock (deconv_5)                      [20, 64, 64, 64]          [20, 3, 256, 256]         --                             --                   [4, 4]                    --                        True
│    │    └─ConvTranspose2d (conv)                 [20, 64, 64, 64]          [20, 3, 256, 256]         3,075                       0.02%                   [4, 4]                    4,030,464,000             True
│    │    └─BatchNorm2d (bn)                       [20, 3, 256, 256]         [20, 3, 256, 256]         6                           0.00%                   --                        120                       True
│    │    └─ReLU (activation)                      [20, 3, 256, 256]         [20, 3, 256, 256]         --                             --                   --                        --                        --
├─ConvBlock (classificator)                        [20, 3, 256, 256]         [20, 2, 256, 256]         --                             --                   [3, 3]                    --                        True
│    └─Conv2d (conv)                               [20, 3, 256, 256]         [20, 2, 256, 256]         56                          0.00%                   [3, 3]                    73,400,320                True
│    └─BatchNorm2d (bn)                            [20, 2, 256, 256]         [20, 2, 256, 256]         4                           0.00%                   --                        80                        True
│    └─ReLU (activation)                           [20, 2, 256, 256]         [20, 2, 256, 256]         --                             --                   --                        --                        --
=================================================================================================================================================================================================================================
Total params: 18,360,453
Trainable params: 18,360,453
Non-trainable params: 0
Total mult-adds (G): 46.32
=================================================================================================================================================================================================================================
Input size (MB): 15.73
Forward/backward pass size (MB): 4212.00
Params size (MB): 73.44
Estimated Total Size (MB): 4301.17
=================================================================================================================================================================================================================================
  0%|          | 0/100 [00:00<?, ?it/s]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/100 [01:21<2:14:11, 81.33s/it]IoU: 0.40  | train/valid loss: 0.4353/0.4335:   1%|          | 1/100 [01:21<2:14:11, 81.33s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.40  | train/valid loss: 0.4353/0.4335:   2%|▏         | 2/100 [02:44<2:14:46, 82.52s/it]IoU: 0.43  | train/valid loss: 0.4199/0.4194:   2%|▏         | 2/100 [02:44<2:14:46, 82.52s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.43  | train/valid loss: 0.4199/0.4194:   3%|▎         | 3/100 [04:05<2:11:59, 81.65s/it]IoU: 0.46  | train/valid loss: 0.4107/0.4203:   3%|▎         | 3/100 [04:05<2:11:59, 81.65s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.46  | train/valid loss: 0.4107/0.4203:   4%|▍         | 4/100 [05:16<2:04:18, 77.69s/it]IoU: 0.45  | train/valid loss: 0.4031/0.4101:   4%|▍         | 4/100 [05:16<2:04:18, 77.69s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.45  | train/valid loss: 0.4031/0.4101:   5%|▌         | 5/100 [06:38<2:05:22, 79.18s/it]IoU: 0.44  | train/valid loss: 0.3965/0.4076:   5%|▌         | 5/100 [06:38<2:05:22, 79.18s/it][4] Saved weights with IoU: 0.44 | loss: 0.4076
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.44  | train/valid loss: 0.3965/0.4076:   6%|▌         | 6/100 [08:00<2:05:26, 80.07s/it]IoU: 0.46  | train/valid loss: 0.3906/0.4037:   6%|▌         | 6/100 [08:00<2:05:26, 80.07s/it][5] Saved weights with IoU: 0.46 | loss: 0.4037
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.46  | train/valid loss: 0.3906/0.4037:   7%|▋         | 7/100 [09:24<2:05:55, 81.24s/it]IoU: 0.46  | train/valid loss: 0.3855/0.3997:   7%|▋         | 7/100 [09:24<2:05:55, 81.24s/it][6] Saved weights with IoU: 0.46 | loss: 0.3997
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.46  | train/valid loss: 0.3855/0.3997:   8%|▊         | 8/100 [10:45<2:04:32, 81.22s/it]IoU: 0.45  | train/valid loss: 0.3812/0.3977:   8%|▊         | 8/100 [10:45<2:04:32, 81.22s/it][7] Saved weights with IoU: 0.45 | loss: 0.3977
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.45  | train/valid loss: 0.3812/0.3977:   9%|▉         | 9/100 [12:06<2:03:10, 81.21s/it]IoU: 0.47  | train/valid loss: 0.3773/0.3967:   9%|▉         | 9/100 [12:06<2:03:10, 81.21s/it][8] Saved weights with IoU: 0.47 | loss: 0.3967
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.47  | train/valid loss: 0.3773/0.3967:  10%|█         | 10/100 [13:28<2:01:55, 81.29s/it]IoU: 0.44  | train/valid loss: 0.3740/0.3917:  10%|█         | 10/100 [13:28<2:01:55, 81.29s/it][9] Saved weights with IoU: 0.44 | loss: 0.3917
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.44  | train/valid loss: 0.3740/0.3917:  11%|█         | 11/100 [14:50<2:01:06, 81.64s/it]IoU: 0.47  | train/valid loss: 0.3713/0.3917:  11%|█         | 11/100 [14:50<2:01:06, 81.64s/it][10] Saved weights with IoU: 0.47 | loss: 0.3917
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.47  | train/valid loss: 0.3713/0.3917:  12%|█▏        | 12/100 [16:11<1:59:26, 81.44s/it]IoU: 0.48  | train/valid loss: 0.3680/0.3881:  12%|█▏        | 12/100 [16:11<1:59:26, 81.44s/it][11] Saved weights with IoU: 0.48 | loss: 0.3881
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.48  | train/valid loss: 0.3680/0.3881:  13%|█▎        | 13/100 [17:32<1:57:46, 81.23s/it]IoU: 0.48  | train/valid loss: 0.3651/0.3861:  13%|█▎        | 13/100 [17:32<1:57:46, 81.23s/it][12] Saved weights with IoU: 0.48 | loss: 0.3861
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.48  | train/valid loss: 0.3651/0.3861:  14%|█▍        | 14/100 [18:54<1:56:52, 81.54s/it]IoU: 0.48  | train/valid loss: 0.3630/0.3821:  14%|█▍        | 14/100 [18:54<1:56:52, 81.54s/it][13] Saved weights with IoU: 0.48 | loss: 0.3821
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.48  | train/valid loss: 0.3630/0.3821:  15%|█▌        | 15/100 [20:18<1:56:26, 82.19s/it]IoU: 0.47  | train/valid loss: 0.3606/0.3816:  15%|█▌        | 15/100 [20:18<1:56:26, 82.19s/it][14] Saved weights with IoU: 0.47 | loss: 0.3816
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.47  | train/valid loss: 0.3606/0.3816:  16%|█▌        | 16/100 [21:37<1:53:48, 81.30s/it]IoU: 0.47  | train/valid loss: 0.3588/0.3787:  16%|█▌        | 16/100 [21:37<1:53:48, 81.30s/it][15] Saved weights with IoU: 0.47 | loss: 0.3787
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.47  | train/valid loss: 0.3588/0.3787:  17%|█▋        | 17/100 [22:57<1:51:57, 80.93s/it]IoU: 0.47  | train/valid loss: 0.3566/0.3785:  17%|█▋        | 17/100 [22:57<1:51:57, 80.93s/it][16] Saved weights with IoU: 0.47 | loss: 0.3785
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.47  | train/valid loss: 0.3566/0.3785:  18%|█▊        | 18/100 [24:16<1:49:51, 80.39s/it]IoU: 0.48  | train/valid loss: 0.3551/0.3760:  18%|█▊        | 18/100 [24:16<1:49:51, 80.39s/it][17] Saved weights with IoU: 0.48 | loss: 0.3760
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.48  | train/valid loss: 0.3551/0.3760:  19%|█▉        | 19/100 [25:35<1:48:01, 80.02s/it]IoU: 0.42  | train/valid loss: 0.3536/0.3860:  19%|█▉        | 19/100 [25:35<1:48:01, 80.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.42  | train/valid loss: 0.3536/0.3860:  20%|██        | 20/100 [26:53<1:45:58, 79.49s/it]IoU: 0.45  | train/valid loss: 0.3519/0.3775:  20%|██        | 20/100 [26:53<1:45:58, 79.49s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.45  | train/valid loss: 0.3519/0.3775:  21%|██        | 21/100 [28:12<1:44:26, 79.32s/it]IoU: 0.44  | train/valid loss: 0.3501/0.3787:  21%|██        | 21/100 [28:12<1:44:26, 79.32s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.44  | train/valid loss: 0.3501/0.3787:  22%|██▏       | 22/100 [29:27<1:41:28, 78.05s/it]IoU: 0.49  | train/valid loss: 0.3483/0.3713:  22%|██▏       | 22/100 [29:27<1:41:28, 78.05s/it][21] Saved weights with IoU: 0.49 | loss: 0.3713
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.49  | train/valid loss: 0.3483/0.3713:  23%|██▎       | 23/100 [30:48<1:41:06, 78.79s/it]IoU: 0.40  | train/valid loss: 0.3470/0.3959:  23%|██▎       | 23/100 [30:48<1:41:06, 78.79s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.40  | train/valid loss: 0.3470/0.3959:  24%|██▍       | 24/100 [32:09<1:40:31, 79.37s/it]IoU: 0.47  | train/valid loss: 0.3449/0.3669:  24%|██▍       | 24/100 [32:09<1:40:31, 79.37s/it][23] Saved weights with IoU: 0.47 | loss: 0.3669
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.47  | train/valid loss: 0.3449/0.3669:  25%|██▌       | 25/100 [33:31<1:40:23, 80.31s/it]IoU: 0.34  | train/valid loss: 0.3329/0.4414:  25%|██▌       | 25/100 [33:31<1:40:23, 80.31s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.34  | train/valid loss: 0.3329/0.4414:  26%|██▌       | 26/100 [34:52<1:39:20, 80.55s/it]IoU: 0.69  | train/valid loss: 0.3077/0.3419:  26%|██▌       | 26/100 [34:52<1:39:20, 80.55s/it][25] Saved weights with IoU: 0.69 | loss: 0.3419
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.69  | train/valid loss: 0.3077/0.3419:  27%|██▋       | 27/100 [36:16<1:39:13, 81.55s/it]IoU: 0.72  | train/valid loss: 0.3014/0.3338:  27%|██▋       | 27/100 [36:16<1:39:13, 81.55s/it][26] Saved weights with IoU: 0.72 | loss: 0.3338
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.72  | train/valid loss: 0.3014/0.3338:  28%|██▊       | 28/100 [37:37<1:37:36, 81.35s/it]IoU: 0.71  | train/valid loss: 0.2965/0.3324:  28%|██▊       | 28/100 [37:37<1:37:36, 81.35s/it][27] Saved weights with IoU: 0.71 | loss: 0.3324
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.71  | train/valid loss: 0.2965/0.3324:  29%|██▉       | 29/100 [38:58<1:36:09, 81.26s/it]IoU: 0.75  | train/valid loss: 0.2921/0.3187:  29%|██▉       | 29/100 [38:58<1:36:09, 81.26s/it][28] Saved weights with IoU: 0.75 | loss: 0.3187
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.75  | train/valid loss: 0.2921/0.3187:  30%|███       | 30/100 [40:19<1:34:41, 81.17s/it]IoU: 0.75  | train/valid loss: 0.2888/0.3160:  30%|███       | 30/100 [40:19<1:34:41, 81.17s/it][29] Saved weights with IoU: 0.75 | loss: 0.3160
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.75  | train/valid loss: 0.2888/0.3160:  31%|███       | 31/100 [41:40<1:33:16, 81.11s/it]IoU: 0.75  | train/valid loss: 0.2858/0.3129:  31%|███       | 31/100 [41:40<1:33:16, 81.11s/it][30] Saved weights with IoU: 0.75 | loss: 0.3129
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.75  | train/valid loss: 0.2858/0.3129:  32%|███▏      | 32/100 [43:04<1:32:51, 81.94s/it]IoU: 0.77  | train/valid loss: 0.2826/0.3082:  32%|███▏      | 32/100 [43:04<1:32:51, 81.94s/it][31] Saved weights with IoU: 0.77 | loss: 0.3082
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.77  | train/valid loss: 0.2826/0.3082:  33%|███▎      | 33/100 [44:25<1:31:17, 81.76s/it]IoU: 0.77  | train/valid loss: 0.2791/0.3065:  33%|███▎      | 33/100 [44:25<1:31:17, 81.76s/it][32] Saved weights with IoU: 0.77 | loss: 0.3065
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.77  | train/valid loss: 0.2791/0.3065:  34%|███▍      | 34/100 [45:49<1:30:25, 82.21s/it]IoU: 0.78  | train/valid loss: 0.2765/0.3021:  34%|███▍      | 34/100 [45:49<1:30:25, 82.21s/it][33] Saved weights with IoU: 0.78 | loss: 0.3021
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.78  | train/valid loss: 0.2765/0.3021:  35%|███▌      | 35/100 [47:09<1:28:37, 81.81s/it]IoU: 0.75  | train/valid loss: 0.2742/0.3085:  35%|███▌      | 35/100 [47:09<1:28:37, 81.81s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.75  | train/valid loss: 0.2742/0.3085:  36%|███▌      | 36/100 [48:30<1:26:46, 81.36s/it]IoU: 0.77  | train/valid loss: 0.2720/0.3023:  36%|███▌      | 36/100 [48:30<1:26:46, 81.36s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.77  | train/valid loss: 0.2720/0.3023:  37%|███▋      | 37/100 [49:51<1:25:25, 81.35s/it]IoU: 0.77  | train/valid loss: 0.2697/0.2993:  37%|███▋      | 37/100 [49:51<1:25:25, 81.35s/it][36] Saved weights with IoU: 0.77 | loss: 0.2993
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.77  | train/valid loss: 0.2697/0.2993:  38%|███▊      | 38/100 [51:12<1:23:54, 81.20s/it]IoU: 0.77  | train/valid loss: 0.2680/0.2996:  38%|███▊      | 38/100 [51:12<1:23:54, 81.20s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.77  | train/valid loss: 0.2680/0.2996:  39%|███▉      | 39/100 [52:36<1:23:24, 82.04s/it]IoU: 0.78  | train/valid loss: 0.2657/0.2938:  39%|███▉      | 39/100 [52:36<1:23:24, 82.04s/it][38] Saved weights with IoU: 0.78 | loss: 0.2938
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.78  | train/valid loss: 0.2657/0.2938:  40%|████      | 40/100 [53:57<1:21:39, 81.66s/it]IoU: 0.81  | train/valid loss: 0.2640/0.2887:  40%|████      | 40/100 [53:57<1:21:39, 81.66s/it][39] Saved weights with IoU: 0.81 | loss: 0.2887
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.81  | train/valid loss: 0.2640/0.2887:  41%|████      | 41/100 [55:17<1:19:53, 81.24s/it]IoU: 0.77  | train/valid loss: 0.2623/0.2969:  41%|████      | 41/100 [55:17<1:19:53, 81.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.77  | train/valid loss: 0.2623/0.2969:  42%|████▏     | 42/100 [56:38<1:18:30, 81.21s/it]IoU: 0.80  | train/valid loss: 0.2606/0.2857:  42%|████▏     | 42/100 [56:38<1:18:30, 81.21s/it][41] Saved weights with IoU: 0.80 | loss: 0.2857
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.80  | train/valid loss: 0.2606/0.2857:  43%|████▎     | 43/100 [57:59<1:17:01, 81.08s/it]IoU: 0.77  | train/valid loss: 0.2591/0.2949:  43%|████▎     | 43/100 [57:59<1:17:01, 81.08s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.77  | train/valid loss: 0.2591/0.2949:  44%|████▍     | 44/100 [59:20<1:15:35, 80.99s/it]IoU: 0.80  | train/valid loss: 0.2576/0.2855:  44%|████▍     | 44/100 [59:20<1:15:35, 80.99s/it][43] Saved weights with IoU: 0.80 | loss: 0.2855
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.80  | train/valid loss: 0.2576/0.2855:  45%|████▌     | 45/100 [1:00:40<1:14:03, 80.80s/it]IoU: 0.79  | train/valid loss: 0.2560/0.2861:  45%|████▌     | 45/100 [1:00:40<1:14:03, 80.80s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.79  | train/valid loss: 0.2560/0.2861:  46%|████▌     | 46/100 [1:02:01<1:12:48, 80.89s/it]IoU: 0.80  | train/valid loss: 0.2550/0.2853:  46%|████▌     | 46/100 [1:02:01<1:12:48, 80.89s/it][45] Saved weights with IoU: 0.80 | loss: 0.2853
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.80  | train/valid loss: 0.2550/0.2853:  47%|████▋     | 47/100 [1:03:20<1:10:51, 80.22s/it]IoU: 0.80  | train/valid loss: 0.2535/0.2842:  47%|████▋     | 47/100 [1:03:20<1:10:51, 80.22s/it][46] Saved weights with IoU: 0.80 | loss: 0.2842
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.80  | train/valid loss: 0.2535/0.2842:  48%|████▊     | 48/100 [1:04:39<1:09:13, 79.87s/it]IoU: 0.81  | train/valid loss: 0.2522/0.2796:  48%|████▊     | 48/100 [1:04:39<1:09:13, 79.87s/it][47] Saved weights with IoU: 0.81 | loss: 0.2796
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.81  | train/valid loss: 0.2522/0.2796:  49%|████▉     | 49/100 [1:05:57<1:07:31, 79.44s/it]IoU: 0.81  | train/valid loss: 0.2511/0.2814:  49%|████▉     | 49/100 [1:05:57<1:07:31, 79.44s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.81  | train/valid loss: 0.2511/0.2814:  50%|█████     | 50/100 [1:07:16<1:06:03, 79.27s/it]IoU: 0.79  | train/valid loss: 0.2497/0.2831:  50%|█████     | 50/100 [1:07:16<1:06:03, 79.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.79  | train/valid loss: 0.2497/0.2831:  51%|█████     | 51/100 [1:08:37<1:05:02, 79.64s/it]IoU: 0.81  | train/valid loss: 0.2490/0.2800:  51%|█████     | 51/100 [1:08:37<1:05:02, 79.64s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.81  | train/valid loss: 0.2490/0.2800:  52%|█████▏    | 52/100 [1:09:55<1:03:27, 79.33s/it]IoU: 0.80  | train/valid loss: 0.2482/0.2791:  52%|█████▏    | 52/100 [1:09:55<1:03:27, 79.33s/it][51] Saved weights with IoU: 0.80 | loss: 0.2791
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.80  | train/valid loss: 0.2482/0.2791:  53%|█████▎    | 53/100 [1:11:17<1:02:41, 80.02s/it]IoU: 0.82  | train/valid loss: 0.2471/0.2750:  53%|█████▎    | 53/100 [1:11:17<1:02:41, 80.02s/it][52] Saved weights with IoU: 0.82 | loss: 0.2750
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.82  | train/valid loss: 0.2471/0.2750:  54%|█████▍    | 54/100 [1:12:36<1:01:06, 79.70s/it]IoU: 0.82  | train/valid loss: 0.2466/0.2732:  54%|█████▍    | 54/100 [1:12:36<1:01:06, 79.70s/it][53] Saved weights with IoU: 0.82 | loss: 0.2732
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.82  | train/valid loss: 0.2466/0.2732:  55%|█████▌    | 55/100 [1:13:53<59:19, 79.09s/it]  IoU: 0.81  | train/valid loss: 0.2448/0.2783:  55%|█████▌    | 55/100 [1:13:53<59:19, 79.09s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.81  | train/valid loss: 0.2448/0.2783:  56%|█████▌    | 56/100 [1:15:15<58:37, 79.95s/it]IoU: 0.81  | train/valid loss: 0.2442/0.2728:  56%|█████▌    | 56/100 [1:15:15<58:37, 79.95s/it][55] Saved weights with IoU: 0.81 | loss: 0.2728
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.81  | train/valid loss: 0.2442/0.2728:  57%|█████▋    | 57/100 [1:16:34<57:06, 79.69s/it]IoU: 0.83  | train/valid loss: 0.2439/0.2695:  57%|█████▋    | 57/100 [1:16:35<57:06, 79.69s/it][56] Saved weights with IoU: 0.83 | loss: 0.2695
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2439/0.2695:  58%|█████▊    | 58/100 [1:17:53<55:28, 79.24s/it]IoU: 0.82  | train/valid loss: 0.2426/0.2723:  58%|█████▊    | 58/100 [1:17:53<55:28, 79.24s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.82  | train/valid loss: 0.2426/0.2723:  59%|█████▉    | 59/100 [1:19:15<54:41, 80.04s/it]IoU: 0.82  | train/valid loss: 0.2421/0.2687:  59%|█████▉    | 59/100 [1:19:15<54:41, 80.04s/it][58] Saved weights with IoU: 0.82 | loss: 0.2687
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.82  | train/valid loss: 0.2421/0.2687:  60%|██████    | 60/100 [1:20:33<53:03, 79.58s/it]IoU: 0.82  | train/valid loss: 0.2405/0.2703:  60%|██████    | 60/100 [1:20:33<53:03, 79.58s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.82  | train/valid loss: 0.2405/0.2703:  61%|██████    | 61/100 [1:21:52<51:31, 79.27s/it]IoU: 0.83  | train/valid loss: 0.2406/0.2692:  61%|██████    | 61/100 [1:21:52<51:31, 79.27s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2406/0.2692:  62%|██████▏   | 62/100 [1:23:12<50:28, 79.71s/it]IoU: 0.82  | train/valid loss: 0.2394/0.2667:  62%|██████▏   | 62/100 [1:23:12<50:28, 79.71s/it][61] Saved weights with IoU: 0.82 | loss: 0.2667
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.82  | train/valid loss: 0.2394/0.2667:  63%|██████▎   | 63/100 [1:24:31<48:52, 79.26s/it]IoU: 0.82  | train/valid loss: 0.2393/0.2694:  63%|██████▎   | 63/100 [1:24:31<48:52, 79.26s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.82  | train/valid loss: 0.2393/0.2694:  64%|██████▍   | 64/100 [1:25:49<47:21, 78.94s/it]IoU: 0.83  | train/valid loss: 0.2381/0.2680:  64%|██████▍   | 64/100 [1:25:49<47:21, 78.94s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2381/0.2680:  65%|██████▌   | 65/100 [1:27:08<46:06, 79.04s/it]IoU: 0.83  | train/valid loss: 0.2372/0.2659:  65%|██████▌   | 65/100 [1:27:08<46:06, 79.04s/it][64] Saved weights with IoU: 0.83 | loss: 0.2659
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2372/0.2659:  66%|██████▌   | 66/100 [1:28:27<44:43, 78.93s/it]IoU: 0.83  | train/valid loss: 0.2366/0.2660:  66%|██████▌   | 66/100 [1:28:27<44:43, 78.93s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2366/0.2660:  67%|██████▋   | 67/100 [1:29:49<43:52, 79.78s/it]IoU: 0.82  | train/valid loss: 0.2368/0.2651:  67%|██████▋   | 67/100 [1:29:49<43:52, 79.78s/it][66] Saved weights with IoU: 0.82 | loss: 0.2651
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.82  | train/valid loss: 0.2368/0.2651:  68%|██████▊   | 68/100 [1:31:08<42:26, 79.58s/it]IoU: 0.83  | train/valid loss: 0.2362/0.2647:  68%|██████▊   | 68/100 [1:31:08<42:26, 79.58s/it][67] Saved weights with IoU: 0.83 | loss: 0.2647
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2362/0.2647:  69%|██████▉   | 69/100 [1:32:31<41:38, 80.60s/it]IoU: 0.83  | train/valid loss: 0.2349/0.2637:  69%|██████▉   | 69/100 [1:32:31<41:38, 80.60s/it][68] Saved weights with IoU: 0.83 | loss: 0.2637
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2349/0.2637:  70%|███████   | 70/100 [1:33:50<40:05, 80.19s/it]IoU: 0.83  | train/valid loss: 0.2349/0.2635:  70%|███████   | 70/100 [1:33:50<40:05, 80.19s/it][69] Saved weights with IoU: 0.83 | loss: 0.2635
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2349/0.2635:  71%|███████   | 71/100 [1:35:08<38:25, 79.51s/it]IoU: 0.83  | train/valid loss: 0.2343/0.2644:  71%|███████   | 71/100 [1:35:08<38:25, 79.51s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2343/0.2644:  72%|███████▏  | 72/100 [1:36:26<36:55, 79.14s/it]IoU: 0.80  | train/valid loss: 0.2333/0.2850:  72%|███████▏  | 72/100 [1:36:26<36:55, 79.14s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.80  | train/valid loss: 0.2333/0.2850:  73%|███████▎  | 73/100 [1:37:46<35:44, 79.42s/it]IoU: 0.83  | train/valid loss: 0.2336/0.2631:  73%|███████▎  | 73/100 [1:37:46<35:44, 79.42s/it][72] Saved weights with IoU: 0.83 | loss: 0.2631
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2336/0.2631:  74%|███████▍  | 74/100 [1:39:08<34:43, 80.15s/it]IoU: 0.70  | train/valid loss: 0.2321/0.3056:  74%|███████▍  | 74/100 [1:39:08<34:43, 80.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.70  | train/valid loss: 0.2321/0.3056:  75%|███████▌  | 75/100 [1:40:27<33:15, 79.84s/it]IoU: 0.84  | train/valid loss: 0.2323/0.2612:  75%|███████▌  | 75/100 [1:40:27<33:15, 79.84s/it][74] Saved weights with IoU: 0.84 | loss: 0.2612
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2323/0.2612:  76%|███████▌  | 76/100 [1:41:46<31:51, 79.63s/it]IoU: 0.84  | train/valid loss: 0.2323/0.2595:  76%|███████▌  | 76/100 [1:41:46<31:51, 79.63s/it][75] Saved weights with IoU: 0.84 | loss: 0.2595
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2323/0.2595:  77%|███████▋  | 77/100 [1:43:07<30:42, 80.10s/it]IoU: 0.83  | train/valid loss: 0.2319/0.2673:  77%|███████▋  | 77/100 [1:43:07<30:42, 80.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2319/0.2673:  78%|███████▊  | 78/100 [1:44:26<29:08, 79.50s/it]IoU: 0.84  | train/valid loss: 0.2311/0.2598:  78%|███████▊  | 78/100 [1:44:26<29:08, 79.50s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2311/0.2598:  79%|███████▉  | 79/100 [1:45:44<27:42, 79.15s/it]IoU: 0.83  | train/valid loss: 0.2305/0.2604:  79%|███████▉  | 79/100 [1:45:44<27:42, 79.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2305/0.2604:  80%|████████  | 80/100 [1:47:06<26:41, 80.07s/it]IoU: 0.84  | train/valid loss: 0.2305/0.2594:  80%|████████  | 80/100 [1:47:06<26:41, 80.07s/it][79] Saved weights with IoU: 0.84 | loss: 0.2594
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2305/0.2594:  81%|████████  | 81/100 [1:48:25<25:17, 79.85s/it]IoU: 0.84  | train/valid loss: 0.2292/0.2586:  81%|████████  | 81/100 [1:48:25<25:17, 79.85s/it][80] Saved weights with IoU: 0.84 | loss: 0.2586
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2292/0.2586:  82%|████████▏ | 82/100 [1:49:45<23:53, 79.63s/it]IoU: 0.84  | train/valid loss: 0.2296/0.2581:  82%|████████▏ | 82/100 [1:49:45<23:53, 79.63s/it][81] Saved weights with IoU: 0.84 | loss: 0.2581
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2296/0.2581:  83%|████████▎ | 83/100 [1:51:03<22:25, 79.17s/it]IoU: 0.84  | train/valid loss: 0.2294/0.2596:  83%|████████▎ | 83/100 [1:51:03<22:25, 79.17s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2294/0.2596:  84%|████████▍ | 84/100 [1:52:24<21:15, 79.70s/it]IoU: 0.84  | train/valid loss: 0.2291/0.2576:  84%|████████▍ | 84/100 [1:52:24<21:15, 79.70s/it][83] Saved weights with IoU: 0.84 | loss: 0.2576
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2291/0.2576:  85%|████████▌ | 85/100 [1:53:43<19:52, 79.49s/it]IoU: 0.84  | train/valid loss: 0.2290/0.2576:  85%|████████▌ | 85/100 [1:53:43<19:52, 79.49s/it][84] Saved weights with IoU: 0.84 | loss: 0.2576
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2290/0.2576:  86%|████████▌ | 86/100 [1:55:03<18:36, 79.77s/it]IoU: 0.84  | train/valid loss: 0.2298/0.2581:  86%|████████▌ | 86/100 [1:55:03<18:36, 79.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2298/0.2581:  87%|████████▋ | 87/100 [1:56:21<17:10, 79.30s/it]IoU: 0.84  | train/valid loss: 0.2291/0.2581:  87%|████████▋ | 87/100 [1:56:21<17:10, 79.30s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2291/0.2581:  88%|████████▊ | 88/100 [1:57:40<15:51, 79.29s/it]IoU: 0.84  | train/valid loss: 0.2287/0.2570:  88%|████████▊ | 88/100 [1:57:40<15:51, 79.29s/it][87] Saved weights with IoU: 0.84 | loss: 0.2570
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2287/0.2570:  89%|████████▉ | 89/100 [1:59:01<14:35, 79.57s/it]IoU: 0.83  | train/valid loss: 0.2285/0.2581:  89%|████████▉ | 89/100 [1:59:01<14:35, 79.57s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2285/0.2581:  90%|█████████ | 90/100 [2:00:19<13:11, 79.15s/it]IoU: 0.84  | train/valid loss: 0.2286/0.2572:  90%|█████████ | 90/100 [2:00:19<13:11, 79.15s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2286/0.2572:  91%|█████████ | 91/100 [2:01:38<11:52, 79.17s/it]IoU: 0.84  | train/valid loss: 0.2288/0.2561:  91%|█████████ | 91/100 [2:01:38<11:52, 79.17s/it][90] Saved weights with IoU: 0.84 | loss: 0.2561
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2288/0.2561:  92%|█████████▏| 92/100 [2:02:57<10:31, 78.96s/it]IoU: 0.84  | train/valid loss: 0.2280/0.2566:  92%|█████████▏| 92/100 [2:02:57<10:31, 78.96s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2280/0.2566:  93%|█████████▎| 93/100 [2:04:17<09:15, 79.35s/it]IoU: 0.84  | train/valid loss: 0.2277/0.2563:  93%|█████████▎| 93/100 [2:04:17<09:15, 79.35s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2277/0.2563:  94%|█████████▍| 94/100 [2:05:35<07:54, 79.02s/it]IoU: 0.83  | train/valid loss: 0.2281/0.2571:  94%|█████████▍| 94/100 [2:05:35<07:54, 79.02s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.83  | train/valid loss: 0.2281/0.2571:  95%|█████████▌| 95/100 [2:06:54<06:34, 78.97s/it]IoU: 0.84  | train/valid loss: 0.2279/0.2568:  95%|█████████▌| 95/100 [2:06:54<06:34, 78.97s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2279/0.2568:  96%|█████████▌| 96/100 [2:08:12<05:15, 78.77s/it]IoU: 0.84  | train/valid loss: 0.2275/0.2568:  96%|█████████▌| 96/100 [2:08:12<05:15, 78.77s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2275/0.2568:  97%|█████████▋| 97/100 [2:09:33<03:58, 79.43s/it]IoU: 0.84  | train/valid loss: 0.2272/0.2565:  97%|█████████▋| 97/100 [2:09:33<03:58, 79.43s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2272/0.2565:  98%|█████████▊| 98/100 [2:10:51<02:38, 79.10s/it]IoU: 0.84  | train/valid loss: 0.2278/0.2564:  98%|█████████▊| 98/100 [2:10:51<02:38, 79.10s/it]Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2278/0.2564:  99%|█████████▉| 99/100 [2:12:14<01:20, 80.08s/it]IoU: 0.84  | train/valid loss: 0.2276/0.2560:  99%|█████████▉| 99/100 [2:12:14<01:20, 80.08s/it][98] Saved weights with IoU: 0.84 | loss: 0.2560
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
IoU: 0.84  | train/valid loss: 0.2276/0.2560: 100%|██████████| 100/100 [2:13:32<00:00, 79.61s/it]IoU: 0.84  | train/valid loss: 0.2268/0.2563: 100%|██████████| 100/100 [2:13:32<00:00, 79.61s/it]IoU: 0.84  | train/valid loss: 0.2268/0.2563: 100%|██████████| 100/100 [2:13:33<00:00, 80.13s/it]
